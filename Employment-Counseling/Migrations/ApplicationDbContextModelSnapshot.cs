// <auto-generated />
using System;
using Employment_Counseling.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Employment_Counseling.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CounselorPackage", b =>
                {
                    b.Property<Guid>("CounselorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PackagesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CounselorsId", "PackagesId");

                    b.HasIndex("PackagesId");

                    b.ToTable("CounselorPackage");
                });

            modelBuilder.Entity("Employment_Counseling.Entities.AnswerItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserAnswersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserAnswersId");

                    b.ToTable("AnswerItems");
                });

            modelBuilder.Entity("Employment_Counseling.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IncludeCall")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeTilDiagnosis")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("Employment_Counseling.Entities.QuestionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OptionsRaw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("QuestionItems");
                });

            modelBuilder.Entity("Employment_Counseling.Entities.Questionnaire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questionnaires");
                });

            modelBuilder.Entity("Employment_Counseling.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCostumer")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Employment_Counseling.Entities.UserAnswers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CostumerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CostumerId");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("PackageQuestionnaire", b =>
                {
                    b.Property<Guid>("PackagesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionnairesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PackagesId", "QuestionnairesId");

                    b.HasIndex("QuestionnairesId");

                    b.ToTable("PackageQuestionnaire");
                });

            modelBuilder.Entity("Employment_Counseling.Entities.Costumer", b =>
                {
                    b.HasBaseType("Employment_Counseling.Entities.User");

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplitedQuestionnaires")
                        .HasColumnType("bit");

                    b.Property<int>("IsPaid")
                        .HasColumnType("int");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("PackageId");

                    b.ToTable("Costumers", (string)null);
                });

            modelBuilder.Entity("Employment_Counseling.Entities.Counselor", b =>
                {
                    b.HasBaseType("Employment_Counseling.Entities.User");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Counselors", (string)null);
                });

            modelBuilder.Entity("CounselorPackage", b =>
                {
                    b.HasOne("Employment_Counseling.Entities.Counselor", null)
                        .WithMany()
                        .HasForeignKey("CounselorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employment_Counseling.Entities.Package", null)
                        .WithMany()
                        .HasForeignKey("PackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Employment_Counseling.Entities.AnswerItem", b =>
                {
                    b.HasOne("Employment_Counseling.Entities.QuestionItem", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Employment_Counseling.Entities.UserAnswers", "UserAnswers")
                        .WithMany("Answers")
                        .HasForeignKey("UserAnswersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("Employment_Counseling.Entities.QuestionItem", b =>
                {
                    b.HasOne("Employment_Counseling.Entities.Questionnaire", "Questionnaire")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("Employment_Counseling.Entities.UserAnswers", b =>
                {
                    b.HasOne("Employment_Counseling.Entities.Costumer", "Costumer")
                        .WithMany("UserAnswers")
                        .HasForeignKey("CostumerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Employment_Counseling.Entities.Questionnaire", "Questionnaire")
                        .WithMany()
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Costumer");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("PackageQuestionnaire", b =>
                {
                    b.HasOne("Employment_Counseling.Entities.Package", null)
                        .WithMany()
                        .HasForeignKey("PackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employment_Counseling.Entities.Questionnaire", null)
                        .WithMany()
                        .HasForeignKey("QuestionnairesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Employment_Counseling.Entities.Costumer", b =>
                {
                    b.HasOne("Employment_Counseling.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Employment_Counseling.Entities.Costumer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employment_Counseling.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Employment_Counseling.Entities.Counselor", b =>
                {
                    b.HasOne("Employment_Counseling.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Employment_Counseling.Entities.Counselor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Employment_Counseling.Entities.Questionnaire", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Employment_Counseling.Entities.UserAnswers", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Employment_Counseling.Entities.Costumer", b =>
                {
                    b.Navigation("UserAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
